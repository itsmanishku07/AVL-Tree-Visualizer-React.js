{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manish\\\\Desktop\\\\5 Days Of Holiday\\\\Avl Tree\\\\AVL Project\\\\avltreeproject\\\\src\\\\components\\\\TreeContainer.jsx\";\nimport React from 'react';\nimport Node from './Node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeContainer = ({\n  avlTree\n}) => {\n  const renderTree = (node, x, y, gap) => {\n    if (!node) return null;\n    const leftChild = renderTree(node.left, x - gap / 2, y + 80, gap / 2);\n    const rightChild = renderTree(node.right, x + gap / 2, y + 80, gap / 2);\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Node, {\n        value: node.value,\n        x: x,\n        y: y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), leftChild, rightChild]\n    }, node.value, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"treeContainer\",\n    children: avlTree.root ? renderTree(avlTree.root, 400, 20, 200) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Tree is empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 64\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c = TreeContainer;\nexport default TreeContainer;\nvar _c;\n$RefreshReg$(_c, \"TreeContainer\");","map":{"version":3,"names":["React","Node","jsxDEV","_jsxDEV","TreeContainer","avlTree","renderTree","node","x","y","gap","leftChild","left","rightChild","right","Fragment","children","value","fileName","_jsxFileName","lineNumber","columnNumber","id","root","_c","$RefreshReg$"],"sources":["C:/Users/Manish/Desktop/5 Days Of Holiday/Avl Tree/AVL Project/avltreeproject/src/components/TreeContainer.jsx"],"sourcesContent":["import React from 'react';\r\nimport Node from './Node';\r\n\r\nconst TreeContainer = ({ avlTree }) => {\r\n  const renderTree = (node, x, y, gap) => {\r\n    if (!node) return null;\r\n\r\n    const leftChild = renderTree(node.left, x - gap / 2, y + 80, gap / 2);\r\n    const rightChild = renderTree(node.right, x + gap / 2, y + 80, gap / 2);\r\n\r\n    return (\r\n      <React.Fragment key={node.value}>\r\n        <Node value={node.value} x={x} y={y} />\r\n        {leftChild}\r\n        {rightChild}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div id=\"treeContainer\">\r\n      {avlTree.root ? renderTree(avlTree.root, 400, 20, 200) : <p>Tree is empty.</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeContainer;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EACrC,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAEC,GAAG,KAAK;IACtC,IAAI,CAACH,IAAI,EAAE,OAAO,IAAI;IAEtB,MAAMI,SAAS,GAAGL,UAAU,CAACC,IAAI,CAACK,IAAI,EAAEJ,CAAC,GAAGE,GAAG,GAAG,CAAC,EAAED,CAAC,GAAG,EAAE,EAAEC,GAAG,GAAG,CAAC,CAAC;IACrE,MAAMG,UAAU,GAAGP,UAAU,CAACC,IAAI,CAACO,KAAK,EAAEN,CAAC,GAAGE,GAAG,GAAG,CAAC,EAAED,CAAC,GAAG,EAAE,EAAEC,GAAG,GAAG,CAAC,CAAC;IAEvE,oBACEP,OAAA,CAACH,KAAK,CAACe,QAAQ;MAAAC,QAAA,gBACbb,OAAA,CAACF,IAAI;QAACgB,KAAK,EAAEV,IAAI,CAACU,KAAM;QAACT,CAAC,EAAEA,CAAE;QAACC,CAAC,EAAEA;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACtCV,SAAS,EACTE,UAAU;IAAA,GAHQN,IAAI,CAACU,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIf,CAAC;EAErB,CAAC;EAED,oBACElB,OAAA;IAAKmB,EAAE,EAAC,eAAe;IAAAN,QAAA,EACpBX,OAAO,CAACkB,IAAI,GAAGjB,UAAU,CAACD,OAAO,CAACkB,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,gBAAGpB,OAAA;MAAAa,QAAA,EAAG;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEV,CAAC;AAACG,EAAA,GArBIpB,aAAa;AAuBnB,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}