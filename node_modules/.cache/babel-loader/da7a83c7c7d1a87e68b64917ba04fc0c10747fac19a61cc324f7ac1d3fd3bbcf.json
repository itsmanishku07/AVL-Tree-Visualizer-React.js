{"ast":null,"code":"class Node {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n    this.height = 1;\n  }\n}\nclass AVLTree {\n  constructor() {\n    this.root = null;\n  }\n  getHeight(node) {\n    return node ? node.height : 0;\n  }\n  getBalance(node) {\n    return node ? this.getHeight(node.left) - this.getHeight(node.right) : 0;\n  }\n  rightRotate(y) {\n    const x = y.left;\n    const T2 = x.right;\n    x.right = y;\n    y.left = T2;\n    y.height = Math.max(this.getHeight(y.left), this.getHeight(y.right)) + 1;\n    x.height = Math.max(this.getHeight(x.left), this.getHeight(x.right)) + 1;\n    return x;\n  }\n  leftRotate(x) {\n    const y = x.right;\n    const T2 = y.left;\n    y.left = x;\n    x.right = T2;\n    x.height = Math.max(this.getHeight(x.left), this.getHeight(x.right)) + 1;\n    y.height = Math.max(this.getHeight(y.left), this.getHeight(y.right)) + 1;\n    return y;\n  }\n  insert(value) {\n    this.root = this._insertNode(this.root, value);\n  }\n  _insertNode(node, value) {\n    if (!node) return new Node(value);\n    if (value < node.value) node.left = this._insertNode(node.left, value);else if (value > node.value) node.right = this._insertNode(node.right, value);else return node;\n    node.height = 1 + Math.max(this.getHeight(node.left), this.getHeight(node.right));\n    const balance = this.getBalance(node);\n    if (balance > 1 && value < node.left.value) return this.rightRotate(node);\n    if (balance < -1 && value > node.right.value) return this.leftRotate(node);\n    if (balance > 1 && value > node.left.value) {\n      node.left = this.leftRotate(node.left);\n      return this.rightRotate(node);\n    }\n    if (balance < -1 && value < node.right.value) {\n      node.right = this.rightRotate(node.right);\n      return this.leftRotate(node);\n    }\n    return node;\n  }\n  delete(value) {\n    this.root = this._deleteNode(this.root, value);\n  }\n  _deleteNode(root, value) {\n    if (!root) return root;\n    if (value < root.value) root.left = this._deleteNode(root.left, value);else if (value > root.value) root.right = this._deleteNode(root.right, value);else {\n      if (!root.left || !root.right) root = root.left || root.right;else {\n        const temp = this.getMinValueNode(root.right);\n        root.value = temp.value;\n        root.right = this._deleteNode(root.right, temp.value);\n      }\n    }\n    if (!root) return root;\n    root.height = 1 + Math.max(this.getHeight(root.left), this.getHeight(root.right));\n    const balance = this.getBalance(root);\n    if (balance > 1 && this.getBalance(root.left) >= 0) return this.rightRotate(root);\n    if (balance > 1 && this.getBalance(root.left) < 0) {\n      root.left = this.leftRotate(root.left);\n      return this.rightRotate(root);\n    }\n    if (balance < -1 && this.getBalance(root.right) <= 0) return this.leftRotate(root);\n    if (balance < -1 && this.getBalance(root.right) > 0) {\n      root.right = this.rightRotate(root.right);\n      return this.leftRotate(root);\n    }\n    return root;\n  }\n  find(value) {\n    return this._findNode(this.root, value);\n  }\n  _findNode(node, value) {\n    if (!node) return null;\n    if (node.value === value) return node;\n    if (value < node.value) return this._findNode(node.left, value);\n    return this._findNode(node.right, value);\n  }\n  traverse(type) {\n    const result = [];\n    if (type === 'inorder') this._inOrder(this.root, result);else if (type === 'preorder') this._preOrder(this.root, result);else if (type === 'postorder') this._postOrder(this.root, result);\n    return result;\n  }\n  _inOrder(node, result) {\n    if (node) {\n      this._inOrder(node.left, result);\n      result.push(node.value);\n      this._inOrder(node.right, result);\n    }\n  }\n  _preOrder(node, result) {\n    if (node) {\n      result.push(node.value);\n      this._preOrder(node.left, result);\n      this._preOrder(node.right, result);\n    }\n  }\n  _postOrder(node, result) {\n    if (node) {\n      this._postOrder(node.left, result);\n      this._postOrder(node.right, result);\n      result.push(node.value);\n    }\n  }\n  getMinValueNode(node) {\n    while (node && node.left) node = node.left;\n    return node;\n  }\n}\nexport default AVLTree;","map":{"version":3,"names":["Node","constructor","value","left","right","height","AVLTree","root","getHeight","node","getBalance","rightRotate","y","x","T2","Math","max","leftRotate","insert","_insertNode","balance","delete","_deleteNode","temp","getMinValueNode","find","_findNode","traverse","type","result","_inOrder","_preOrder","_postOrder","push"],"sources":["C:/Users/Manish/Desktop/5 Days Of Holiday/Avl Tree/avltreeproject/src/utils/AVLTree.js"],"sourcesContent":["class Node {\r\n    constructor(value) {\r\n      this.value = value;\r\n      this.left = null;\r\n      this.right = null;\r\n      this.height = 1;\r\n    }\r\n  }\r\n  \r\n  class AVLTree {\r\n    constructor() {\r\n      this.root = null;\r\n    }\r\n  \r\n    getHeight(node) {\r\n      return node ? node.height : 0;\r\n    }\r\n  \r\n    getBalance(node) {\r\n      return node ? this.getHeight(node.left) - this.getHeight(node.right) : 0;\r\n    }\r\n  \r\n    rightRotate(y) {\r\n      const x = y.left;\r\n      const T2 = x.right;\r\n  \r\n      x.right = y;\r\n      y.left = T2;\r\n  \r\n      y.height = Math.max(this.getHeight(y.left), this.getHeight(y.right)) + 1;\r\n      x.height = Math.max(this.getHeight(x.left), this.getHeight(x.right)) + 1;\r\n  \r\n      return x;\r\n    }\r\n  \r\n    leftRotate(x) {\r\n      const y = x.right;\r\n      const T2 = y.left;\r\n  \r\n      y.left = x;\r\n      x.right = T2;\r\n  \r\n      x.height = Math.max(this.getHeight(x.left), this.getHeight(x.right)) + 1;\r\n      y.height = Math.max(this.getHeight(y.left), this.getHeight(y.right)) + 1;\r\n  \r\n      return y;\r\n    }\r\n  \r\n    insert(value) {\r\n      this.root = this._insertNode(this.root, value);\r\n    }\r\n  \r\n    _insertNode(node, value) {\r\n      if (!node) return new Node(value);\r\n  \r\n      if (value < node.value) node.left = this._insertNode(node.left, value);\r\n      else if (value > node.value) node.right = this._insertNode(node.right, value);\r\n      else return node;\r\n  \r\n      node.height = 1 + Math.max(this.getHeight(node.left), this.getHeight(node.right));\r\n  \r\n      const balance = this.getBalance(node);\r\n  \r\n      if (balance > 1 && value < node.left.value) return this.rightRotate(node);\r\n      if (balance < -1 && value > node.right.value) return this.leftRotate(node);\r\n      if (balance > 1 && value > node.left.value) {\r\n        node.left = this.leftRotate(node.left);\r\n        return this.rightRotate(node);\r\n      }\r\n      if (balance < -1 && value < node.right.value) {\r\n        node.right = this.rightRotate(node.right);\r\n        return this.leftRotate(node);\r\n      }\r\n  \r\n      return node;\r\n    }\r\n  \r\n    delete(value) {\r\n      this.root = this._deleteNode(this.root, value);\r\n    }\r\n  \r\n    _deleteNode(root, value) {\r\n      if (!root) return root;\r\n  \r\n      if (value < root.value) root.left = this._deleteNode(root.left, value);\r\n      else if (value > root.value) root.right = this._deleteNode(root.right, value);\r\n      else {\r\n        if (!root.left || !root.right) root = root.left || root.right;\r\n        else {\r\n          const temp = this.getMinValueNode(root.right);\r\n          root.value = temp.value;\r\n          root.right = this._deleteNode(root.right, temp.value);\r\n        }\r\n      }\r\n  \r\n      if (!root) return root;\r\n  \r\n      root.height = 1 + Math.max(this.getHeight(root.left), this.getHeight(root.right));\r\n  \r\n      const balance = this.getBalance(root);\r\n  \r\n      if (balance > 1 && this.getBalance(root.left) >= 0) return this.rightRotate(root);\r\n      if (balance > 1 && this.getBalance(root.left) < 0) {\r\n        root.left = this.leftRotate(root.left);\r\n        return this.rightRotate(root);\r\n      }\r\n      if (balance < -1 && this.getBalance(root.right) <= 0) return this.leftRotate(root);\r\n      if (balance < -1 && this.getBalance(root.right) > 0) {\r\n        root.right = this.rightRotate(root.right);\r\n        return this.leftRotate(root);\r\n      }\r\n  \r\n      return root;\r\n    }\r\n  \r\n    find(value) {\r\n      return this._findNode(this.root, value);\r\n    }\r\n  \r\n    _findNode(node, value) {\r\n      if (!node) return null;\r\n      if (node.value === value) return node;\r\n      if (value < node.value) return this._findNode(node.left, value);\r\n      return this._findNode(node.right, value);\r\n    }\r\n  \r\n    traverse(type) {\r\n      const result = [];\r\n      if (type === 'inorder') this._inOrder(this.root, result);\r\n      else if (type === 'preorder') this._preOrder(this.root, result);\r\n      else if (type === 'postorder') this._postOrder(this.root, result);\r\n      return result;\r\n    }\r\n  \r\n    _inOrder(node, result) {\r\n      if (node) {\r\n        this._inOrder(node.left, result);\r\n        result.push(node.value);\r\n        this._inOrder(node.right, result);\r\n      }\r\n    }\r\n  \r\n    _preOrder(node, result) {\r\n      if (node) {\r\n        result.push(node.value);\r\n        this._preOrder(node.left, result);\r\n        this._preOrder(node.right, result);\r\n      }\r\n    }\r\n  \r\n    _postOrder(node, result) {\r\n      if (node) {\r\n        this._postOrder(node.left, result);\r\n        this._postOrder(node.right, result);\r\n        result.push(node.value);\r\n      }\r\n    }\r\n  \r\n    getMinValueNode(node) {\r\n      while (node && node.left) node = node.left;\r\n      return node;\r\n    }\r\n  }\r\n  \r\n  export default AVLTree;\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}